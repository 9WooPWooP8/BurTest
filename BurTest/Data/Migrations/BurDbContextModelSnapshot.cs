// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using BurTest.Data.Models;

#nullable disable

namespace BurTest.Data.Migrations
{
    [DbContext(typeof(BurDbContext))]
    partial class BurDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("bur_test.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("t_company");
                });

            modelBuilder.Entity("bur_test.Data.Models.Telemetry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_time");

                    b.Property<float>("Depth")
                        .HasColumnType("REAL")
                        .HasColumnName("depth");

                    b.HasKey("Id");

                    b.ToTable("t_telemetry");
                });

            modelBuilder.Entity("bur_test.Data.Models.TelemetryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_time");

                    b.Property<float>("Depth")
                        .HasColumnType("REAL")
                        .HasColumnName("depth");

                    b.Property<int>("TelemetryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_telemetry");

                    b.Property<int>("WellId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_well");

                    b.HasKey("Id");

                    b.HasIndex("TelemetryId");

                    b.HasIndex("WellId");

                    b.ToTable("t_telemetry_history");
                });

            modelBuilder.Entity("bur_test.Data.Models.Well", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_company");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("TelemetryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_telemetry");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TelemetryId")
                        .IsUnique();

                    b.ToTable("t_well");
                });

            modelBuilder.Entity("bur_test.Data.Models.TelemetryHistory", b =>
                {
                    b.HasOne("bur_test.Data.Models.Telemetry", "Telemetry")
                        .WithMany()
                        .HasForeignKey("TelemetryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bur_test.Data.Models.Well", "Well")
                        .WithMany("TelemetryHistory")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Telemetry");

                    b.Navigation("Well");
                });

            modelBuilder.Entity("bur_test.Data.Models.Well", b =>
                {
                    b.HasOne("bur_test.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bur_test.Data.Models.Telemetry", "Telemetry")
                        .WithOne("Well")
                        .HasForeignKey("bur_test.Data.Models.Well", "TelemetryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Telemetry");
                });

            modelBuilder.Entity("bur_test.Data.Models.Telemetry", b =>
                {
                    b.Navigation("Well");
                });

            modelBuilder.Entity("bur_test.Data.Models.Well", b =>
                {
                    b.Navigation("TelemetryHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
